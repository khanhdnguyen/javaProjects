
import java.util.Scanner;

public class Ciphers {

	public static final int MAX_ROWS = 6;
	// main method to demonstrate various encrytpions and
	// decryptions using a columnar transposition cipher
	public static void main(String[] args) {
		Scanner keyboard = new Scanner(System.in);
		showIntro();
		doEncryptions(keyboard);
		doDecryptions(keyboard);
		showTests();
		keyboard.close();
	}

	// show the introduction to the program
	public static void showIntro() {
		System.out.println("This program demonstrates a transposition cipher.");
		System.out.println("A cipher is an algorithm to encrypt or decrypt a message.");
		System.out.println();
		System.out.println("This program will demonstrate encrypting a message with");
		System.out.println("a columnar transposition cipher, both with and without");
		System.out.println("padding characters. The program will then decrypt a message");
		System.out.println("assuming it was encrypted with a columnar transposition cipher");
		System.out.println("with padding.\n");
	}   

	// Do various encryptions, both padded with Xs and
	// not padded.
	public static void doEncryptions(Scanner keyboard) {
		// finish this method.
		// Break the problem up into methods
		System.out.println("\nA demonstration of encrypting with a columnar transposition cipher:\n");
		System.out.print("Enter the message to encrypt: ");
		String userInput = keyboard.nextLine();
		System.out.println();
		System.out.println("Message encrypted with columnar transposition cipher and no padding.");
		for (int unPadded = 2; unPadded <= MAX_ROWS; unPadded++) {
			System.out.print("Encryped with " + unPadded + " rows: ");
			System.out.println(noPadding(userInput, unPadded));
		}
		System.out.println("\nMessage encrypted with columnar transposition cipher and padding.\n");
		for (int pad = 2; pad <= MAX_ROWS; pad++) {
			System.out.println("Clear text padded for " + pad + " rows: " + encryptX(userInput, pad));
			System.out.print("Encryped with " + pad + " rows: ");
			System.out.println(encryptMessage(encryptX(userInput, pad), pad)+"\n");
		}
	}

	//This method returns the output of the encryption when user type in a word
	public static String encryptMessage(String userEncrypt, int codeWord) {
		int proceed = 0;
		String inscribe = "";
		while (proceed < codeWord) {
			for (int i = proceed; i < userEncrypt.length(); i += codeWord) {
				inscribe += userEncrypt.charAt(i);
			}
			proceed++;
		}
		return inscribe;
	}

	//This method displays the padding with "X"
	public static String encryptX(String userEncrypt, int rows) {
		if (userEncrypt.length() % rows > 0) {
			int blank = userEncrypt.length() % rows;
			for (int i = 0; i < rows - blank; i++) {
				userEncrypt += "X";
			}
		}
		return userEncrypt;
	}

	//This execute the code that contains no padding on it
	public static String noPadding(String userEncrypt, int num) {
		int begin = 0;
		String words = "";
		while (begin < num) {
			for (int i = begin; i < userEncrypt.length(); i += num) {
				words += userEncrypt.charAt(i);
			}
			begin++;
		}
		return words;
	}

	// Do various decryptions of provided messages for
	// various values of the number of rows.
	public static void doDecryptions(Scanner keyboard) {
		// finish this method.
		// Break the problem up into methods
		System.out.println("A demonstration of decrypting with a columnar transposition cipher:");
		System.out.println("If the length of the message is not a multiple of the number of rows");
		System.out.println("it will be padded, which may throw off the decryption.\n");
		System.out.print("Enter the message to decrypt: ");
		String userDecrypt = keyboard.nextLine();
		System.out.println("\nMessages Decrypted with a Columnar Transposition Cipher\n");
		for (int i = 2; i <= MAX_ROWS; i++) { 
			System.out.println("Decrypted text padded for " + i + " rows: " + decryptX(userDecrypt, i));
			System.out.print("Decrypted with " + i + " rows: ");
			System.out.println(decryptMessage(decryptX(userDecrypt, i), i)+"\n");
		}
	}

	//This method generates the encrypted message into the decrypted characters 
	//that displays the X's in the empty spaces in the column.
	public static String decryptX(String decryptWord, int decryptRow) {
		int length = decryptRow - decryptWord.length() / decryptRow;
		if (decryptWord.length() % decryptRow > 0) {
			for (int i = 0; i < length; i++) {
				decryptWord += "X";
			}
		}
		return decryptWord;
	}

	//This method does the actual decryption of the encrypted words
	public static String decryptMessage(String decryptWord, int decryptRow) {
		int start = 0, lengthWord = decryptWord.length(), position = lengthWord / decryptRow;;
		String result = "";
		for (int i = 0; i < lengthWord; i++) {
			result += decryptWord.charAt(start);
			start += position;
			if (start > lengthWord - 1) {
				start += 1 - lengthWord;
			}
		}
		return result;
	}

	// Show tests of the methods.
	public static void showTests() {
		System.out.println();
		System.out.println("This displays automatic tests of the program: ");

		// *** 2 tests for decrypting
		String encryptedMessage = "AEIBFJCGXDHX"; // this was encrypted with 4 rows.
		String expected = "ABCDEFGHIJXX";
		// The last 2 int parameters are rows, then test number.
		decryptTest(encryptedMessage, expected, 4, 1);

		encryptedMessage = "CPEOURMT!"; // this was encrypted with 3 rows.
		expected = "COMPUTER!";
		decryptTest(encryptedMessage, expected, 3, 2);

		// CS 312 students -- add 2 more decryption tests -- #3, and #4.
		encryptedMessage = "WDSIOXNWX"; // this was encrypted with 3 rows
		expected = "WINDOWSXX";
		decryptTest(encryptedMessage, expected, 3, 3);

		encryptedMessage = "LNHRSOGONX"; // this was encrypted with 3 rows
		expected = "LONGHORNSX";
		decryptTest(encryptedMessage, expected, 2, 4);

		// 2 tests for encrypting with padding
		String clearMessage = "Dell_CS_HallXXX";
		expected = "DCleSll_XlHX_aX";
		encryptTest(clearMessage, expected, 5, 1);

		clearMessage = "Texas_LonghornsX";
		expected = "Tsnre_gnxLhsaooX";
		encryptTest(clearMessage, expected, 4, 2);

		// CS 312 students --  add 2 more encryption tests -- #3, and #4.
		clearMessage = "NandakumarXX";
		expected = "NduraamXnkaX";
		encryptTest(clearMessage, expected, 3, 3);

		clearMessage = "MacBook_Pro_RetinaXX";
		expected = "MoPRnaoreackotXB__iX";
		encryptTest(clearMessage, expected, 4, 4);

	}

	public static void decryptTest(String encryptedMessage,
			String expected, int rows, int testNumber) {

		System.out.println();
		String actual = decryptMessage(encryptedMessage, rows);
		System.out.println("expected: " + expected + ", actual: " + actual);
		if(expected.equals(actual))
			System.out.println("passed decrypt test" + testNumber);
		else
			System.out.println("FAILED DECRYPT TEST " + testNumber);
	}

	public static void encryptTest(String clearMessage,
			String expected, int rows, int testNumber) {

		System.out.println();
		String actual = encryptMessage(clearMessage, rows);
		System.out.println("expected: " + expected + ", actual: " + actual);
		if(expected.equals(actual))
			System.out.println("passed encrypt test" + testNumber);
		else
			System.out.println("FAILED ENCRYPT TEST " + testNumber);
	}
}
